#importing for style purposes
from colorama import Fore, Style, init
from pyfiglet import figlet_format
import time

init()
# initialising now. thinking of this as turning on a styling engine.

# TYPING effect function
def type_out(text, delay=0.05):
    for char in text:
        print(char, end='', flush=True) #'' indicates an empty string, meaning no space/newline ‚Äî nothing. 
        time.sleep(delay)                 #it's telling print() to not add anything after each character.
    print()
    #we end with print to move the cursor to a new line after the typing loop finishes. Otherwise, next output would continue on same line.
#def decode_message():
    
# BANNER using ASCII
#title = figlet_format("Guestbook", font="tinker-toy") - Decided this is unnecessary
print(Fore.RED + Style.BRIGHT)

# WELCOME MESSAGE 
type_out("üõéÔ∏è ding ding\n") 
#end with \n so after the sentence types out, the cursor moves to the next line
type_out("Ah. You've arrived.\n")

type_out("We are terribly pleased...and simultaneously concerned...to welcome you to Hotel Lecarr√©.")
type_out("Please do not ask about the 13th floor.\n")

type_out("Now then. Before we can assign you a room or ask pointed questions about your past, we must know:\n")

type_out("What name shall we enter into our guestbook?")
name = input("Name: ")
print()

type_out(f"Thank you, {name}. Your check-in is almost complete. But as you may have already guessed - and if you haven't, please begin guessing immediately ‚Äî Hotel Lecarr√© is no ordinary hotel.\n")

type_out("Our guestbook is not a guestbook. It is a collection of secret messages disguised as polite remarks, which can only be read if you possess an alarming familiarity with someone else's name.")
type_out("A dead drop, essentially.\n")

type_out("You may leave a secret message...")
type_out("Decrypt one...")
type_out("Or unlock the entire guestbook with a masterkey, which we do NOT recommend.\n")

type_out("Would you like to leave a message?")
type_out("Choose: YES / NO / HOW VERY DARE YOU")

choice = input(">>> ").strip().upper() #input prompts the user and retrieves text
print()    #strip and upper remove spacing and converts input to caps so there's more freedom in answer format.

if choice=="YES":
    type_out("Marvelous. Or at the very least, deeply suspicious.\n")
    type_out("Please type your message below.")
    message=input()
    
# MESSAGE STORAGE - using json for this
import json
import os
#Create folder to hold messages - aka secrets - if it doesn't already exist
if not os.path.exists("secrets"):
    os.makedirs("secrets")
    
    entry = {
        "name": name,
        "code": code,
        "message": message
        }
    filename = f"secrets/{name}.json"
    with open(filename, "w") as file:
        json.dump(entry, file, indent=4)
    type_out("Your message has been scrambled. Whether it will be decoded is now someone else's unfortunate concern.")
  
    type_out("Would you like to decode a message now?")
    if input(">>> ").strip().upper() == "YES":
   # decode_message()
    # Insert your decode logic here
        
elif choice=="NO":
    type_out("Very well. Silence is, in its own way, a message.\n")
    type_out("...Or did you want to possibly...decode a message instead?")
    type_out("Choose: Indeed / I SAID NO!")
    choice = input(">>>").strip().upper()
    print()
    if choice=="Indeed"
  #  decode_message()
    
elif choice=="HOW VERY DARE YOU":
    type_out("Touch√©.\n")
    type_out("Your indignation has been noted in your file, alongside ‚Äúrefused the mini-bar‚Äù and ‚Äúsuspected of knowing too much.‚Äù\n")
    type_out("But let it be known: those who do not leave messages are often the most suspicious of all.\n")
    type_out(f"Enjoy your stay, {name}.")
    
else:
    type_out("Hmm. That wasn‚Äôt one of the options, but it‚Äôs noted in the guestbook anyway.")
